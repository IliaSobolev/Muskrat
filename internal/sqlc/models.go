// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Castle string

const (
	CastleRed     Castle = "red"
	CastleYellow  Castle = "yellow"
	CastleGreen   Castle = "green"
	CastleBlue    Castle = "blue"
	CastleUnknown Castle = "unknown"
)

func (e *Castle) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Castle(s)
	case string:
		*e = Castle(s)
	default:
		return fmt.Errorf("unsupported scan type for Castle: %T", src)
	}
	return nil
}

type NullCastle struct {
	Castle Castle
	Valid  bool // Valid is true if Castle is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCastle) Scan(value interface{}) error {
	if value == nil {
		ns.Castle, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Castle.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCastle) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Castle), nil
}

type SquadRole string

const (
	SquadRoleStranger  SquadRole = "stranger"
	SquadRoleMember    SquadRole = "member"
	SquadRoleBartender SquadRole = "bartender"
	SquadRoleSquire    SquadRole = "squire"
	SquadRoleCommander SquadRole = "commander"
	SquadRoleLeader    SquadRole = "leader"
)

func (e *SquadRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SquadRole(s)
	case string:
		*e = SquadRole(s)
	default:
		return fmt.Errorf("unsupported scan type for SquadRole: %T", src)
	}
	return nil
}

type NullSquadRole struct {
	SquadRole SquadRole
	Valid     bool // Valid is true if SquadRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSquadRole) Scan(value interface{}) error {
	if value == nil {
		ns.SquadRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SquadRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSquadRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SquadRole), nil
}

type Guild struct {
	ID        pgtype.UUID
	SquadID   pgtype.UUID
	Name      string
	Tag       string
	LeaderID  int64
	Level     int32
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Player struct {
	ID               int64
	Username         string
	PlayerRole       int32
	Language         string
	SquadID          pgtype.UUID
	GuildID          pgtype.UUID
	SquadRole        SquadRole
	FirstSeen        pgtype.Timestamptz
	LastSeen         pgtype.Timestamptz
	Castle           Castle
	PlayerName       string
	Level            int32
	CurrentExp       int32
	NextLevelExp     int32
	Rank             int32
	Str              int32
	Dex              int32
	Vit              int32
	DetailedStats    []byte
	ProfileUpdatedAt pgtype.Timestamptz
	Schools          []byte
	SchoolsUpdatedAt pgtype.Timestamptz
	PlayerBalance    int32
	BankBalance      int32
	BalanceUpdatedAt pgtype.Timestamptz
}

type Squad struct {
	ID        pgtype.UUID
	ChatID    pgtype.UUID
	Name      string
	Castle    Castle
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
