// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :exec
INSERT INTO players (id, username, player_role, language, first_seen, last_seen)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePlayerParams struct {
	ID         int64
	Username   string
	PlayerRole int32
	Language   string
	FirstSeen  pgtype.Timestamptz
	LastSeen   pgtype.Timestamptz
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) error {
	_, err := q.db.Exec(ctx, createPlayer,
		arg.ID,
		arg.Username,
		arg.PlayerRole,
		arg.Language,
		arg.FirstSeen,
		arg.LastSeen,
	)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, username, player_role, language, squad_id, guild_id, squad_role, first_seen, last_seen, castle, player_name, level, current_exp, next_level_exp, rank, str, dex, vit, detailed_stats, profile_updated_at, schools, schools_updated_at, player_balance, bank_balance, balance_updated_at
FROM players
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PlayerRole,
		&i.Language,
		&i.SquadID,
		&i.GuildID,
		&i.SquadRole,
		&i.FirstSeen,
		&i.LastSeen,
		&i.Castle,
		&i.PlayerName,
		&i.Level,
		&i.CurrentExp,
		&i.NextLevelExp,
		&i.Rank,
		&i.Str,
		&i.Dex,
		&i.Vit,
		&i.DetailedStats,
		&i.ProfileUpdatedAt,
		&i.Schools,
		&i.SchoolsUpdatedAt,
		&i.PlayerBalance,
		&i.BankBalance,
		&i.BalanceUpdatedAt,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT id, username, player_role, language, squad_id, guild_id, squad_role, first_seen, last_seen, castle, player_name, level, current_exp, next_level_exp, rank, str, dex, vit, detailed_stats, profile_updated_at, schools, schools_updated_at, player_balance, bank_balance, balance_updated_at
FROM players
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PlayerRole,
		&i.Language,
		&i.SquadID,
		&i.GuildID,
		&i.SquadRole,
		&i.FirstSeen,
		&i.LastSeen,
		&i.Castle,
		&i.PlayerName,
		&i.Level,
		&i.CurrentExp,
		&i.NextLevelExp,
		&i.Rank,
		&i.Str,
		&i.Dex,
		&i.Vit,
		&i.DetailedStats,
		&i.ProfileUpdatedAt,
		&i.Schools,
		&i.SchoolsUpdatedAt,
		&i.PlayerBalance,
		&i.BankBalance,
		&i.BalanceUpdatedAt,
	)
	return i, err
}
