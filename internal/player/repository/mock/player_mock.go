// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/player.go
//
// Generated by this command:
//
//	mockgen -source pkg/domain/player.go -destination internal/player/repository/mock/player_mock.go -package mock -exclude_interfaces PlayerUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/Russia9/Muskrat/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
	isgomock struct{}
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerRepository) Create(ctx context.Context, obj *domain.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlayerRepositoryMockRecorder) Create(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerRepository)(nil).Create), ctx, obj)
}

// Delete mocks base method.
func (m *MockPlayerRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayerRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayerRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPlayerRepository) Get(ctx context.Context, id int64) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlayerRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlayerRepository)(nil).Get), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockPlayerRepository) GetByUsername(ctx context.Context, username string) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockPlayerRepositoryMockRecorder) GetByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockPlayerRepository)(nil).GetByUsername), ctx, username)
}

// Update mocks base method.
func (m *MockPlayerRepository) Update(ctx context.Context, obj *domain.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlayerRepositoryMockRecorder) Update(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlayerRepository)(nil).Update), ctx, obj)
}
